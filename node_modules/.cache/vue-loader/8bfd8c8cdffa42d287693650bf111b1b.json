{"remainingRequest":"/Users/clark/Desktop/business.corestep.com/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/clark/Desktop/business.corestep.com/src/views/auth/ForgotPassword.vue?vue&type=style&index=0&id=6a3f9cca&lang=css&scoped=true&","dependencies":[{"path":"/Users/clark/Desktop/business.corestep.com/src/views/auth/ForgotPassword.vue","mtime":1683674085861},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/css-loader/dist/cjs.js","mtime":1670880042824},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1670880044043},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/postcss-loader/src/index.js","mtime":1670880043297},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/cache-loader/dist/cjs.js","mtime":1670880017776},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/vue-loader/lib/index.js","mtime":1670880044043}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgouYXV0aC13cmFwIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgaGVpZ2h0OiAxMDB2aDsKICB3aWR0aDogMTAwJTsKICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsgKi8KfQoKCkBtZWRpYSAobWF4LXdpZHRoOiA1MDBweCkgewogIC5hdXRoLXdyYXAgewogICAgd2lkdGg6IDEwMCU7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIGhlaWdodDogMTAwdmg7CgogIH0KfQoKCg=="},{"version":3,"sources":["ForgotPassword.vue"],"names":[],"mappings":";;AAuIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"ForgotPassword.vue","sourceRoot":"src/views/auth","sourcesContent":["<template>\n  <div>\n    <notifications></notifications>\n    <div class=\"auth-wrap\">\n        <forgot-password-form/>\n      </div>\n      \n  </div>\n  <!--    </div>-->\n  <!--  </div>-->\n</template>\n<script>\nimport { mapState, mapActions, mapGetters } from \"vuex\";\nimport ForgotPasswordForm from \"../../components/form/ForgotPasswordForm\";\n\nexport default {\n  components: {\n    ForgotPasswordForm\n  },\n  data() {\n    return {\n      timerCount: 0,\n\n      model: {\n        customerEmail: \"\",\n        customerPassword: \"\",\n        customerOtp: \"\",\n        customerPasswordConfirmation: \"\",\n        rememberMe: false,\n      },\n\n      notifications: {\n        topCenter: false,\n      },\n      //disableBtn:false,\n      //spinner:false,\n      showDismissibleAlert: false,\n    };\n  },\n  methods: {\n    signUp() {\n      this.$router.push({ name: \"SignUp\" });\n    },\n    forgotPassword() {},\n   \n    oninitiatePassword() {\n      const user = {\n        customerEmail: this.model.customerEmail,\n        source: \"web\",\n      };\n      this.$store.dispatch(\"initiatePasswordRest\", user, { root: false });\n    },\n    oncompletePassword() {\n      const user = {\n        customerEmail: this.model.customerEmail,\n        customerPassword: this.model.customerPassword,\n        customerPasswordConfirmation: this.model.customerPasswordConfirmation,\n        customerOtp: this.model.customerOtp,\n      };\n      this.$store.dispatch(\"completePasswordRest\", user, { root: false });\n    },\n    resendOtp() {\n      const userEmailForResendOtp = {\n        customerEmail: this.model.customerEmail,\n        source: \"web\",\n      };\n      this.$store\n        .dispatch(\"resendOtp\", userEmailForResendOtp, { root: false })\n        .then(() => {\n          this.timerCount = 30;\n        });\n    },\n    startTimer(duration) {\n      let timer = duration,\n        minutes,\n        seconds;\n      setInterval(function () {\n        minutes = parseInt((timer / 60).toString(), 10);\n        seconds = parseInt((timer % 60).toString(), 10);\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\n        this.timer = minutes + \":\" + seconds;\n        if (--timer < 0) {\n          timer = duration;\n        }\n      }, 1000);\n    },\n  },\n  computed: {\n    ...mapState({\n      loading: (state) => state.auth.loading,\n      checkForm: (state) => state.auth.enrollForm,\n    }),\n    ...mapActions([\"logon\"]),\n    ...mapGetters([\"\"]),\n  },\n  watch: {\n    errors(newValue, oldValue) {\n      console.log(`Updating from ${oldValue} to ${newValue}`);\n\n      // Do whatever makes sense now\n      if (newValue !== null) {\n        this.$toast.error(newValue);\n        //this.showDismissibleAlert=true;\n      }\n    },\n    success(newValue, oldValue) {\n      console.log(`Updating from ${oldValue} to ${newValue}`);\n\n      // Do whatever makes sense now\n      if (newValue !== null) {\n        this.$toast.success(newValue);\n        //this.showDismissibleAlert=true;\n      }\n    },\n      timerCount: {\n    handler(value) {\n      if (value > 0) {\n        setTimeout(() => {\n          this.timerCount--;\n        }, 1000);\n      }\n    },\n    //immediate: true, // This ensures the watcher is triggered upon creation\n  },\n  },\n\n  mounted: function() {\n    this.startTimer();\n    this.timerCount = 30;\n  },\n};\n</script>\n<style lang=\"css\" scoped>\n\n.auth-wrap {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: 100%;\n  /* background-color: white; */\n}\n\n\n@media (max-width: 500px) {\n  .auth-wrap {\n    width: 100%;\n    display: block;\n    height: 100vh;\n\n  }\n}\n\n\n</style>\n"]}]}