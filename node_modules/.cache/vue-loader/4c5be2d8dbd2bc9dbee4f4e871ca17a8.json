{"remainingRequest":"/Users/clark/Desktop/business.corestep.com/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/clark/Desktop/business.corestep.com/src/components/form/AddBankForm.vue?vue&type=style&index=0&id=4698a906&scoped=true&lang=css&","dependencies":[{"path":"/Users/clark/Desktop/business.corestep.com/src/components/form/AddBankForm.vue","mtime":1684111140009},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/css-loader/dist/cjs.js","mtime":1670880042824},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1670880044043},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/postcss-loader/src/index.js","mtime":1670880043297},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/cache-loader/dist/cjs.js","mtime":1670880017776},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/vue-loader/lib/index.js","mtime":1670880044043}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jYXJkLWhlYWR7CiAgY29sb3I6ICM0MTNkNTI7Cn0KLnNwaW5uZXItYm9yZGVyIHsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIHdpZHRoOiAxcmVtOwogICAgaGVpZ2h0OiAxcmVtOwogICAgdmVydGljYWwtYWxpZ246IHRleHQtYm90dG9tOwogICAgYm9yZGVyOiAwLjI1ZW0gc29saWQgY3VycmVudENvbG9yOwogICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKICAgIC13ZWJraXQtYW5pbWF0aW9uOiBzcGlubmVyLWJvcmRlciAwLjc1cyBsaW5lYXIgaW5maW5pdGU7CiAgICBhbmltYXRpb246IHNwaW5uZXItYm9yZGVyIDAuNzVzIGxpbmVhciBpbmZpbml0ZTsKfQoKQGtleWZyYW1lcyBzcGlubmVyLWJvcmRlciB7CiAgICB0byB7CiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsKICAgIH0KfQo="},{"version":3,"sources":["AddBankForm.vue"],"names":[],"mappings":";AA6NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"AddBankForm.vue","sourceRoot":"src/components/form","sourcesContent":["<template>\n    <modal-1 :show=\"showCreateBank && showModal\" body-classes=\"p-1\" modal-classes=\"modal-dialog-centered modal-md\">\n        <div>\n          <div class=\"card-head\">\n            <div class=\"d-flex justify-content-between\">\n              <h4 style=\"font-size:18px;font-weight:700;width: 100%;display: flex;justify-content: center;align-items: center\">Add Payout Bank</h4>\n              <button type=\"button\" class=\"btn-close p-2 m-2\" @click=\"closeModal()\" title=\"Cancel Add Payout Bank\"></button>\n            </div>\n          </div>\n            <div class=\"card-body\">\n                <div class=\"form\">\n                    <b-form class=\"bform2 text-left\" @submit.prevent=\"addBank()\">\n                        <b-form-group id=\"input-group-3\" label=\"Bank Name\" label-for=\"input-3\">\n                            <base-input>\n                                <el-select class=\"select-danger\" filterable placeholder=\"Bank Name\" required v-model=\"createPayoutAccountModel.accountBankName\">\n                                    <el-option v-for=\"bank in banks\" class=\"select-danger\" :value=\"bank.value\" :label=\"bank.label\" :key=\"bank.value\"></el-option>\n                                </el-select>\n                            </base-input>\n                        </b-form-group>\n\n                        <b-form-group id=\"input-group-4\" label=\"Account Number\" label-for=\"input-4\">\n                            <b-form-input id=\"input-4\" type=\"number\" placeholder=\"Account Number\" v-model=\"createPayoutAccountModel.accountNumber\" class=\"mr-2\" required></b-form-input>\n                        </b-form-group>\n\n                        <b-form-group id=\"input-group-5\" label=\"Account Name\" label-for=\"input-5\">\n                            <b-form-input id=\"input-5\" type=\"text\" placeholder=\"Account Name\" v-model=\"createPayoutAccountModel.accountName\" class=\"mr-2\" required></b-form-input>\n                        </b-form-group>\n                        <b-form-group id=\"input-group-5\" label=\"Enter OTP\" label-for=\"input-5\">\n                            <div class=\"d-flex\">\n                                <b-form-input id=\"input-5\" type=\"text\" placeholder=\"OTP\" class=\"mr-2\" required v-model=\"createPayoutAccountModel.otp\"></b-form-input>\n                                <span v-if=\"timerCount > 0\" class=\"m-2 small w-100 text-dark\">Resend OTP in {{ timerCount }}</span>\n                                <b-button class=\"w-100\" @click=\"sendOtp()\" v-else>{{ loadingOtp ? \"Sending\" : \"Send OTP\" }} <span :class=\"{ 'spinner-border': loadingOtp }\"></span></b-button>\n                            </div>\n                        </b-form-group>\n                        <b-button class=\"w-100 text-white\" :style=\"{backgroundColor:primaryColor}\" type=\"submit\">{{createloader ? \"Adding\" : \"Add Bank\" }}\n                            <span :class=\"{ 'spinner-border': createloader }\"></span>\n                        </b-button>\n                    </b-form>\n                </div>\n            </div>\n        </div>\n    </modal-1>\n</template>\n\n<script>\n\nimport { mapState } from \"vuex\";\nimport StoreUtils from \"../../util/baseUtils/StoreUtils\";\nimport AccountPayoutRequest from \"../../model/request/AccountPayoutRequest\";\nimport AuthenticationRequest from \"../../model/request/AuthRequest\";\nimport Swal from \"sweetalert2\";\n\n\nconst Toast = Swal.mixin({\n    toast: true,\n    position: \"top-end\",\n    showConfirmButton: false,\n    timer: 3000,\n    timerProgressBar: true,\n    didOpen: (toast) => {\n        toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n        toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n    },\n});\n\nexport default {\n    name: \"AddBank\",\n    props: {\n        showCreateBank: Boolean,\n    },\n\n    data() {\n        return {\n            sendOtpModel: AuthenticationRequest.resendOtp,\n            createPayoutAccountModel: AccountPayoutRequest.createAccountPayout,\n            readPayoutAccountModel: AccountPayoutRequest.readAccountPayoutById,\n            banks: [],\n            showModal: true,\n            timerCount: 0,\n            primaryColor: window.__env.app.primaryColor\n\n        };\n    },\n    computed: {\n\n        ...mapState({\n            userInfo: (state) => state.auth.userInfo,\n            bankList: (state) => state.virtualAccount.bankList,\n            payoutAccount: (state) => state.accountPayout.addedBanks,\n            createloader: (state) => state.accountPayout.addbankloading,\n            payoutloading: (state) => state.accountPayout.accloading,\n            readonlybank: (state) => state.accountPayout.readOnlyAddedBanks,\n            loading: (state) => state.virtualAccount.loading,\n            loadingOtp: (state) => state.auth.loading,\n\n\n            //documents:(state) => state.document.document\n        }),\n\n        checkInputfield: () => {\n            let organization = StoreUtils.rootGetters(\n                StoreUtils.getters.auth.getCurrentOrganization\n            );\n            return organization;\n        },\n        currentOrganisation() {\n            return StoreUtils.rootGetters(\n                StoreUtils.getters.auth.getCurrentOrganization\n            );\n        },\n    },\n    watch: {\n\n      //watcher\n        timerCount: {\n            handler(value) {\n                if (value > 0) {\n                    setTimeout(() => {\n                        this.timerCount--;\n                    }, 1000);\n                }\n            },\n            //immediate: true, // This ensures the watcher is triggered upon creation\n        },\n        bankList(newValue, oldValue) {\n            // console.log(\n            //   `Updating from Branch ${JSON.stringify(oldValue)} to ${JSON.stringify(\n            //     newValue\n            //   )}`\n            // );\n            // console.log(\"$$$$$$$%%%%%>>>>\\n \" + JSON.stringify(this.bankList));\n            if (this.bankList.length !== 0) {\n                //if(this.bankList.data.length!==0){\n                let bank = [];\n                bank = this.bankList;\n                this.banks = bank.map((item) => {\n                    return {\n                        value: `${item.name} ${item.code}`,\n                        label: `${item.name}`,\n                    };\n                });\n                /* }\n                    else{\n                        this.option_bank=[{value:'',label:'No Record'}];\n                     }*/\n            }\n        },\n    },\n    mounted() {\n      StoreUtils.dispatch(StoreUtils.actions.virtualAccount.updateReadBankList).then();\n\n    },\n    methods: {\n       closeModal() {\n            //close modal form\n            this.showModal = false;\n            this.$emit(\"closeCreateBank\", false);\n            this.showModal = true;\n            //   StoreUtils.commit(StoreUtils.mutations.accountPayout.updateStatus, 'false')\n        },\n\n       addBank() {\n            let bankArray = this.createPayoutAccountModel.accountBankName.split(\" \")\n            let bankCode =bankArray[bankArray.length - 1];\n            let bankName = this.createPayoutAccountModel.accountBankName.replace(bankCode,\"\").trim();\n            this.createPayoutAccountModel.accountCountry = this.userInfo.customerCountry;\n            this.createPayoutAccountModel.accountOrganisationId = this.userInfo.customerId;\n            this.createPayoutAccountModel.username = this.userInfo.customerEmail;\n            this.createPayoutAccountModel.accountBankCode = bankCode;\n            this.createPayoutAccountModel.accountBankName = bankName;\n\n            StoreUtils.dispatch(\n                StoreUtils.actions.accountPayout.createAddedBanks,\n                this.createPayoutAccountModel\n            ).then(() => {\n                this.closeModal()\n                this.readPayoutAccountModel.accountOrganisationId =\n                    localStorage.organisationId;\n                StoreUtils.dispatch(\n                    StoreUtils.actions.accountPayout.readAddedBanks,\n                    this.readPayoutAccountModel\n                )\n            })\n        },\n\n       sendOtp() {\n            this.sendOtpModel.customerEmail = this.userInfo.customerEmail;\n            StoreUtils.dispatch(\n                StoreUtils.actions.auth.resendOtp,\n                this.sendOtpModel\n            ).then(() => {\n                Toast.fire({\n                    text: `Otp Sent to ${this.userInfo.customerEmail}`,\n                    icon: \"success\",\n                });\n                this.timerCount = 30;\n                this.startTimer();\n            });\n        },\n\n      //method\n       startTimer(duration) {\n            let timer = duration,\n                minutes,\n                seconds;\n            setInterval(function () {\n                minutes = parseInt((timer / 60).toString(), 10);\n                seconds = parseInt((timer % 60).toString(), 10);\n                minutes = minutes < 10 ? \"0\" + minutes : minutes;\n                seconds = seconds < 10 ? \"0\" + seconds : seconds;\n                this.timer = minutes + \":\" + seconds;\n                if (--timer < 0) {\n                    timer = duration;\n                }\n            }, 1000);\n        },\n    }\n};\n</script>\n\n<style scoped>\n.card-head{\n  color: #413d52;\n}\n.spinner-border {\n    display: inline-block;\n    width: 1rem;\n    height: 1rem;\n    vertical-align: text-bottom;\n    border: 0.25em solid currentColor;\n    border-right-color: transparent;\n    border-radius: 50%;\n    -webkit-animation: spinner-border 0.75s linear infinite;\n    animation: spinner-border 0.75s linear infinite;\n}\n\n@keyframes spinner-border {\n    to {\n        transform: rotate(360deg);\n    }\n}\n</style>"]}]}