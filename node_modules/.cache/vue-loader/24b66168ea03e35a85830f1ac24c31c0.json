{"remainingRequest":"/Users/clark/Desktop/business.corestep.com/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/clark/Desktop/business.corestep.com/src/components/form/FundTransferForm.vue?vue&type=style&index=0&id=7462bd42&scoped=true&lang=css&","dependencies":[{"path":"/Users/clark/Desktop/business.corestep.com/src/components/form/FundTransferForm.vue","mtime":1684179554001},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/css-loader/dist/cjs.js","mtime":1670880042824},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1670880044043},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/postcss-loader/src/index.js","mtime":1670880043297},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/cache-loader/dist/cjs.js","mtime":1670880017776},{"path":"/Users/clark/Desktop/business.corestep.com/node_modules/vue-loader/lib/index.js","mtime":1670880044043}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zcGlubmVyLWJvcmRlciB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIHdpZHRoOiAxcmVtOwogIGhlaWdodDogMXJlbTsKICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b207CiAgYm9yZGVyOiAwLjI1ZW0gc29saWQgY3VycmVudENvbG9yOwogIGJvcmRlci1yaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIC13ZWJraXQtYW5pbWF0aW9uOiBzcGlubmVyLWJvcmRlciAwLjc1cyBsaW5lYXIgaW5maW5pdGU7CiAgYW5pbWF0aW9uOiBzcGlubmVyLWJvcmRlciAwLjc1cyBsaW5lYXIgaW5maW5pdGU7Cn0KCkBrZXlmcmFtZXMgc3Bpbm5lci1ib3JkZXIgewogIHRvIHsKICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7CiAgfQp9Cg=="},{"version":3,"sources":["FundTransferForm.vue"],"names":[],"mappings":";AA+PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"FundTransferForm.vue","sourceRoot":"src/components/form","sourcesContent":["<template>\n  <modal-1 :show=\"showFundTransfer && showModal\" body-classes=\"p-1\" modal-classes=\"modal-dialog-centered modal-md\">\n    <div>\n      <div class=\"card-head\">\n        <div class=\"d-flex justify-content-between\">\n          <h4  style=\"padding:10px;color:#413d52;font-size:14px;font-weight:700;width: 100%;text-align: center\">Fund Transfer To {{isSendingTo ? \"CORESTEP MFB\" :  \"Other Banks\"}}</h4>\n          <button type=\"button\" class=\"btn-close p-2 m-2\" @click=\"closeModal()\" title=\"Cancel Add Payout Bank\"></button>\n        </div>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"form\">\n          <b-form class=\"bform2 text-left\" @submit.prevent=\"doFundTransfer()\">\n            <div v-if=\"stage == 'nameEnquiry'\">\n              <b-form-group id=\"input-group-3\" label=\"Credit Bank Name\" label-for=\"input-3\" v-show=\"!isSendingTo\">\n                <base-input>\n                  <el-select class=\"select-danger\" filterable placeholder=\"Bank Name\" required v-model=\"bankName\">\n                    <el-option v-for=\"bank in banks\" class=\"select-danger\" :value=\"bank.value\" :label=\"bank.label\" :key=\"bank.value\"></el-option>\n                  </el-select>\n                </base-input>\n              </b-form-group>\n\n              <b-form-group id=\"input-group-4\" label=\"Credit Account Number\" label-for=\"input-group-4\">\n                <b-form-input @input=\"doNameEnquiry\"  :disabled=\"loading\" maxLength=\"10\" :value=\"isSendingTo ? coreStepAccount?.accountNumber : nameEnquiryDetails?.accountNumber\"  id=\"account-number\" type=\"text\" placeholder=\"Account Number\"  class=\"mr-2\" ></b-form-input>\n                <h6>{{errorMessage}}</h6>\n              </b-form-group>\n\n              <span v-show=\"loading\" class=\"small text-success\">Fetching account details</span> <span v-show=\"loading\" class=\"small spinner-border\"></span>\n              <b-form-group id=\"input-group-5\" label=\"Credit Account Name\" label-for=\"input-5\">\n                <b-form-input readonly id=\"input-5\" :value=\"isSendingTo ? coreStepAccount?.accountName : nameEnquiryDetails?.accountName\" type=\"text\" placeholder=\"Account Name Will Appear Here\"  class=\"mr-2\" required></b-form-input>\n              </b-form-group>\n\n              <b-button class=\"w-100 text-black\" :disabled=\"isSendingTo ? !coreStepAccount?.accountName : !nameEnquiryDetails?.accountName\" @click=\"setStageForward\" type=\"submit\">Continue</b-button>\n\n            </div>\n\n            <div v-else>\n              <b-form-group  id=\"input-group-4\" label=\"Debit Wallet Account Number\" label-for=\"input-4\">\n                <b-form-input @change=\"doNameEnquiryOnDebitAccount\" :disabled=\"loading\" @input=\"doNameEnquiryOnDebitAccount\" id=\"debitAccountNumber\" :value=\"debitAccountNameEnquiry?.accountNumber ? debitAccountNameEnquiry?.accountNumber :this.currentOrganisation?.organisationStage === 'DEV' ? this.currentOrganisation?.organisationAccountNumber?.split(',')[1] : this.currentOrganisation?.organisationAccountNumber?.split(',')[0]\" maxLength=\"10\" type=\"text\" placeholder=\"Wallet Account Number\"  class=\"mr-2\"></b-form-input>\n                <h6>{{errorMessage}}</h6>\n              </b-form-group>\n\n              <span v-show=\"loading\" class=\"small text-success\">Fetching account details</span> <span v-show=\"loading\" class=\"small spinner-border\"></span>\n              <b-form-group id=\"input-group-9\" label=\"Debit Wallet Account Name\" label-for=\"input-4\">\n                <b-form-input  :value=\"debitAccountNameEnquiry?.accountName \" id=\"text\" readonly type=\"text\" placeholder=\"Wallet Account Name will appear here\"  class=\"mr-2\" required></b-form-input>\n              </b-form-group>\n\n              <b-form-group id=\"input-group-7\" label=\"Amount\" label-for=\"input-4\">\n                <b-form-input v-model=\"fundTransferModel.amount\" id=\"amount\" type=\"text\" placeholder=\"Enter Amount\"  class=\"mr-2\" required></b-form-input>\n              </b-form-group>\n\n              <b-form-group id=\"input-group-6\" label=\"Narration\" label-for=\"input-5\" >\n                <b-form-textarea v-model=\"fundTransferModel.narration\"  type=\"text\" placeholder=\"Narration\"  class=\"mr-2\" required></b-form-textarea>\n              </b-form-group>\n\n              <div class=\"d-flex\">\n                <b-button class=\"w-100 text-black\" @click=\"setStageBack\">Back</b-button>\n                <b-button class=\"w-100 text-black\" type=\"submit\" :disabled=\"loading2\">{{loading2 ? \"Working\" : \"Proceed\" }}\n                  <span :class=\"{ 'spinner-border': loading2 }\"></span>\n                </b-button>\n\n              </div>\n\n            </div>\n          </b-form>\n        </div>\n      </div>\n    </div>\n  </modal-1>\n</template>\n\n<script>\nimport {mapState} from \"vuex\";\nimport StoreUtils from \"../../util/baseUtils/StoreUtils\";\nimport FundTransferRequest from \"../../model/request/FundTransferRequest\";\n\nexport default {\n  name: \"FundTransferForm\",\n  props: {\n    showFundTransfer: Boolean,\n  },\n  data() {\n      return {\n        showModal: true,\n        banks: [],\n        nameEnquiryModel:FundTransferRequest.nameEnquiry,\n        fundTransferModel:FundTransferRequest.fundTransfer,\n        errorMessage:null,\n        bankName:null,\n        parentName:null\n      }\n    },\n  methods: {\n\n    setStageForward(){\n      StoreUtils.commit(StoreUtils.mutations.fundTransfer.updateStage,'transfer')\n      this.doNameEnquiryOnParentDebitAccount()\n    },\n\n    setStageBack(){\n      StoreUtils.commit(StoreUtils.mutations.fundTransfer.updateStage,'nameEnquiry')\n\n    },\n\n    doFundTransfer(){\n      let SplitBankName;\n\n      if(this.bankName){\n        let bankArray = this.bankName?.split(\" \")\n        let bankCode =bankArray[bankArray?.length-1];\n        SplitBankName= this.bankName?.replace(bankCode,\"\").trim();\n      }else{}\n\n\n      this.fundTransferModel.creditAccountName = this.isSendingTo ? this.coreStepAccount?.accountName : this.nameEnquiryDetails?.accountName\n      this.fundTransferModel.creditAccountNumber = this.isSendingTo ? this.coreStepAccount?.accountNumber : this.nameEnquiryDetails?.accountNumber\n      this.fundTransferModel.debitAccountName = this.debitAccountNameEnquiry?.accountName\n      this.fundTransferModel.debitAccountNumber = this.debitAccountNameEnquiry?.accountNumber\n      this.fundTransferModel.bankName = this.isSendingTo ? \"CORESTEP MICROFINANCE BANK\" : SplitBankName\n      this.fundTransferModel.bankCode = this.isSendingTo ? \"000000\" : this.nameEnquiryDetails?.bankCode\n      this.fundTransferModel.sessionId = this.isSendingTo ? this.coreStepAccount?.sessionId :this.nameEnquiryDetails?.sessionId\n      this.fundTransferModel.sourceType  =  \"WEB\"\n      this.fundTransferModel.reference = `CORE-STEP-${this.reference(30)}`\n      StoreUtils.dispatch(StoreUtils.actions.fundTransfer.fundTransfer).then(() => {\n        this.closeModal()\n      })\n    },\n\n    doNameEnquiryOnDebitAccount(){\n      const input = document.getElementById('debitAccountNumber')\n      this.nameEnquiryModel.accountBankCode = '000000'\n      if(input.value.length == 10) {\n        this.nameEnquiryModel.accountNumber = input.value\n        StoreUtils.dispatch(StoreUtils.actions.fundTransfer.callNameEnquiry)\n      }\n      else if(isNaN(input.value)){\n        input.style.border = \"solid crimson\"\n        this.errorMessage= 'please input numbers'\n      } else{\n        this.errorMessage = null\n      }\n    },\n\n    doNameEnquiryOnParentDebitAccount(){\n      this.nameEnquiryModel.accountBankCode = '000000'\n      this.nameEnquiryModel.accountNumber = this.currentOrganisation?.organisationStage === 'DEV' ? this.currentOrganisation?.organisationAccountNumber?.split(',')[1] : this.currentOrganisation?.organisationAccountNumber?.split(',')[0]\n      StoreUtils.dispatch(StoreUtils.actions.fundTransfer.callNameEnquiry)\n    },\n\n    doNameEnquiry(){\n      const input = document.getElementById('account-number')\n\n      if(this.isSendingTo){\n        // let CoreStep = this.bankList.filter(it => it.name === 'CORESTEP MICROFINANCE BANK')\n        // let bankCode = CoreStep.map(item => item.code).toLocaleString()\n        // console.log(bankCode)\n        this.nameEnquiryModel.accountBankCode = '000000'\n        if(input.value.length == 10) {\n          console.log(input.value)\n          this.nameEnquiryModel.accountNumber = input.value\n          StoreUtils.dispatch(StoreUtils.actions.fundTransfer.callNameEnquiry)\n        }console.log(input.value)\n      }else if(!this.isSendingTo){\n        let bankArray = this.bankName.split(\" \")\n        let bankCode = bankArray[bankArray.length - 1];\n        this.nameEnquiryModel.accountBankCode = bankCode\n        if(input.value.length == 10) {\n          this.nameEnquiryModel.accountNumber = input.value\n          StoreUtils.dispatch(StoreUtils.actions.fundTransfer.callNameEnquiry)\n        }\n      }\n      else{\n        if(isNaN(input.value)){\n          this.errorMessage= 'please input numbers'\n        }else{\n          this.errorMessage= null\n        }\n      }\n\n\n\n    },\n\n    closeModal() {\n      //close modal form\n      this.showModal = false;\n      this.$emit(\"closeFundTransferForm\", false);\n      this.showModal = true;\n      StoreUtils.commit(StoreUtils.mutations.fundTransfer.updateCloseModal, false)\n      StoreUtils.commit(StoreUtils.mutations.fundTransfer.updateDebitAccountNameEnquiry, null)\n      StoreUtils.commit(StoreUtils.mutations.fundTransfer.updateCoreStepCreditAccount, null)\n      StoreUtils.commit(StoreUtils.mutations.fundTransfer.updateNameEnquiry, null)\n      StoreUtils.commit(StoreUtils.mutations.fundTransfer.updateSendingTo, null)\n      StoreUtils.commit(StoreUtils.mutations.fundTransfer.updateStage,'nameEnquiry')\n      Object.keys(this.fundTransferModel).forEach((key) => {\n        this.fundTransferModel[key] = null\n      })\n    },\n\n    reference(length) {\n      let result = \"\"\n      let characters = 'abcdefghijklmnopgrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ0123456789';\n      let charactersLength = characters.length;\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n      return result;\n    },\n\n  },\n  watch: {\n\n    bankList(newValue, oldValue) {\n      if (this.bankList.length !== 0) {\n        //if(this.bankList.data.length!==0){\n        let bank = [];\n        bank = this.bankList;\n        this.banks = bank.map((item) => {\n          return {\n            value: `${item.name} ${item.code}`,\n            label: `${item.name}`,\n          };\n        });\n      }\n    },\n  },\n\n\n  computed:{\n    ...mapState({\n      bankList: (state) => state.virtualAccount.bankList,\n      nameEnquiryDetails:(state) => state.fundTransfer.nameEnquiry,\n      debitAccountNameEnquiry:(state) => state.fundTransfer.debitAccountNameEnquiry,\n      loading:(state) => state.fundTransfer.loading,\n      loading2:(state) => state.fundTransfer.loading2,\n      isSendingTo:state => state.fundTransfer.sendingTo,\n      showModal:state => state.fundTransfer.closeModal,\n      stage:state =>state.fundTransfer.stage,\n      coreStepAccount:state => state.fundTransfer.coreStepCreditAccount\n\n\n\n    }),\n    currentOrganisation() {\n      return StoreUtils.rootGetters(StoreUtils.getters.auth.getCurrentOrganization)\n    },\n  },\n\n  mounted() {\n    StoreUtils.dispatch(StoreUtils.actions.virtualAccount.updateReadBankList).then();\n  }\n\n}\n</script>\n\n<style scoped>\n.spinner-border {\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  vertical-align: text-bottom;\n  border: 0.25em solid currentColor;\n  border-right-color: transparent;\n  border-radius: 50%;\n  -webkit-animation: spinner-border 0.75s linear infinite;\n  animation: spinner-border 0.75s linear infinite;\n}\n\n@keyframes spinner-border {\n  to {\n    transform: rotate(360deg);\n  }\n}\n</style>"]}]}